group 'com.github.pauldambra'

version System.getenv("VERSION") ?: '0.0.0-SNAPSHOT'

allprojects { ext."signing.keyId" = '1FE3FC71' }
allprojects { ext."signing.secretKeyRingFile" = './secring.gpg' }
allprojects { ext."signing.password" = System.getenv("SECRING_PASSWORD") }

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'com.google.guava', name: 'guava', version: '23.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

tasks.withType(Jar) {
    from(project.projectDir) {
        include 'MIT-license.txt'
        into 'META-INF'
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv('MAVEN_USER'), password: System.getenv('MAVEN_PASS'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv('MAVEN_USER'), password: System.getenv('MAVEN_PASS'))
            }

            pom.project {
                name 'ModulusChecker'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Java implementation of UK Bank Account Modulus Checking. Modulus Checking is a process used to determine if a given account number could be valid for a given sort code.'
                url 'https://github.com/pauldambra/JavaModulusChecker'

                scm {
                    connection 'git@github.com:pauldambra/JavaModulusChecker.git'
                    developerConnection 'git@github.com:pauldambra/JavaModulusChecker.git'
                    url 'https://github.com/pauldambra/JavaModulusChecker'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/pauldambra/JavaModulusChecker/blob/master/MIT-license.txt'
                    }
                }

                developers {
                    developer {
                        id 'pauldambra'
                        name 'Paul D\'Ambra'
                        email 'paul.dambra@gmail.com'
                    }
                }
            }
        }
    }
}
